#!/usr/bin/env python
""" vowels 

Generate all permutation of a name as a string, with alternatives being
generated by substituting vowels.

"""
from operator import setitem


VOWELS = ['a', 'e', 'i', 'o', 'u']


sample_names = ["Abdi", "Abdul", "Adega", "Amir", "Aroni", "Boit","Gacheru",
                "Kabul", "Karri", "Karua", "Kimani", "Kipchogi", "Kofi",
                "Machozi", "Muchiri", "Mugambi", "Okeyo", "Olomide", "Osire",
                "Muriuki"]


def vowel_count(name):
    """Get the count of vowels in a name.
    Given a name as a string, return the number of vowels in that name."""
    count = 0
    for i in VOWELS:
        count += name.count(i)
    return count


def name_matrix(name):
    """Get the name matrix.
    Generate matrix of names. This is a list of the same name repeated
    n times, where n is (the number of all vowels) to the power of 
    (the count of vowels in the given name).
    For example 'eric' has 2 vowels and there are 5 vowels, 'aeiou'
    so the length of the name matrix will be 5 to the power of 2 or 25."""
    matrix = []
    for i in range(5**vowel_count(name)):
        matrix.append(name)
    return matrix


def vowel_index(name):
    """Get the index (position) of each vowel in the name.
    Given a name, return a list of index positions, or places where a vowel
    appears in the name.
    For example the name 'eric' returns vowel_index of [0,2]."""
    vowel_index = []
    for i in range(len(name)):
        if VOWELS.__contains__(name[i]):
            vowel_index.append(i)
    return vowel_index


def vowel_list(count):
    """Get a list of the vowels in a name.
    For the name "eric" this function will return the following: [e,i]
    """
    vlist = []
    for i in range(count):
        vlist.extend(VOWELS)
    return vlist


def mutate(matrix, vowel_list, vowel_index):
    """mutate(matrix_list[], vowel_list[], int(vowel_list))
    matrix list is the entire result set, calculated by raising
    5 (the count of all vowels) to the power of
    x (the number of vowels in the name). For example the name Mutuma has 3
    vowels namely "u", "u" and "a"."""
    #print "{}\tMatrix Length:\t{}".format(matrix[0], len(matrix))
    print "{name:<16s} Matrix Length: {length}".format(name=matrix[0], length=len(matrix))
    for position in vowel_index:
        matrix.sort()
        for i in range(len(matrix)):
            l = list(matrix[i])
            setitem(l, position, vowel_list[i]) # l.__setitem__(position, vowel_list[i])
            s = ""
            for letter in l:
                s += letter
            matrix[i] = s
    return matrix


def main():
    """main() function for rapidname module.
    Given a list of names as strings, generate name permutations for each name.
    By default the main() function calls the mutate() function with the sample
    name list provided in the module.
    """
    unwrapthis = []
    namelist = sample_names[:]
    for upper in namelist:
        name = upper.lower()
        index = vowel_index(name)
        matrix = name_matrix(name)
        vlist = vowel_list(len(matrix))
        new_matrix = mutate(matrix, vlist, index)
        unwrapthis.extend(new_matrix)
    print "Total unwrapped names is {}".format(len(unwrapthis))
    f = open("other_list.txt", "w")
    for individualname in unwrapthis:
        f.write(individualname + "\n")
    f.close()


if __name__ == "__main__":
        main()
