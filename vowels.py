#!/usr/bin/env python
# -*- coding: UTF-8 -*-
""" vowels
generatename - Generate name variations by substituting vowels

Generate all permutations of a name as a string, with alternatives being
generated by substituting vowels.

Copyright (c) Eric M. Kiara 2012
by Eric KIARA(eric@eric.co.ke)
"""
from operator import setitem
VOWELS = set(['a', 'e', 'i', 'o', 'u'])
SAMPLE_NAMES = ["aba", "abama", "abanga", "abanya", "abara", "acama",
                "acamara", "acara", "achaka", "achala", "achanda", "achang",
                "achanga", "achara", "adada", "adak", "adaka", "adal",
                "adala", "adanda", "adanga", "adara", "adawar", "adawara",
                "adaya", "adhamba", "adhang", "adhanga", "adwar", "adwara",
                "aga", "agaca", "agacaka", "agacana", "agacaya", "agaga",
                "agaka", "agakana", "agal", "agala", "agalla", "agana",
                "aganana", "aganga", "agar", "agat", "agata", "agatacha",
                "agatanga", "agatha", "agathaga", "agathagara", "agathaka",
                "agathanga", "agatwatha", "agwang", "agwanga", "agwaya",
                "ahanda", "ahanga", "ajak", "ajaka", "ajala", "ajalanga",
                "ajwang", "ajwanga", "aka", "akabaka", "akach", "akacha",
                "akadanda", "akaga", "akagala", "akagwanja", "akahaha",
                "akaka", "akala", "akama", "akamanda", "akamara", "akamata",
                "akamba", "akambatha", "akananja", "akanata", "akanatha",
                "akanga", "akanjaka", "akanya", "akanyata", "akara",
                "akarangara", "akaranja", "akarara", "akata", "akath",
                "akatha", "akathara", "akaya", "ala", "alach", "alacha",
                "aladha", "alla", "ama", "amaca", "amacana", "amaga",
                "amagara", "amajama", "amaka", "amala", "amalla", "amana",
                "amanana", "amanda", "amandta", "amanga", "amangara",
                "amara", "amataba", "amatanga", "amathatha", "ambaga",
                "ambagwa", "ambara", "ambata", "amwanga", "amwara",
                "amwarara", "anaka", "anamath", "ananka", "anda", "andaga",
                "andak", "andaka", "andama", "andanga", "andanya", "anga",
                "angaga", "angana", "anganga", "anganjara", "angara",
                "angaraya", "angaya", "angayagnana", "angayanana", "anjaga",
                "anjagana", "anjanga", "anjara", "anjaraga", "anjatha",
                "anyaka", "anyanga", "anyara", "anyataya", "anyatha",
                "apala", "apalla", "apanda", "apaya", "ara", "arach",
                "aracha", "araga", "arahangha", "arala", "aramaga", "aranga",
                "arawa", "arng", "arnga", "asala", "asana", "atana",
                "atanda", "atara", "atha", "athagana", "athata", "awabara",
                "awachara", "awaganja", "awahanya", "awahara", "awakaga",
                "awakanda", "awamaganda", "awamatata", "awamba", "awambaga",
                "awana", "awanana", "awanga", "awangama", "awangamba",
                "awanjaha", "awanjaka", "awanyaka", "awanyaraga", "awar",
                "awara", "awaraga", "awaraganga", "awarakara", "awarama",
                "awarara", "awarata", "awaratama", "awaratara", "awata",
                "awataka", "awathaka", "awawara", "ayanga", "ayanya", "bara",
                "cama", "camara", "cara", "chara", "gaca", "gacaka",
                "gacana", "gacaya", "gaga", "gaka", "gakana", "ganana",
                "ganga", "gar", "gara", "gata", "gatacha", "gatanga",
                "gatha", "gathaga", "gathagara", "gathaka", "gathanga",
                "gatwatha", "hanga", "jala", "jalanga", "kabaka", "kacha",
                "kadanda", "kaga", "kagala", "kagwanja", "kahaha", "kala",
                "kama", "kamanda", "kamara", "kamata", "kambatha", "kananja",
                "kanata", "kanatha", "kanga", "kanjaka", "kanyata", "kara",
                "karangara", "karanja", "karara", "kata", "kathara", "maca",
                "macana", "maga", "magara", "majama", "maka", "mala", "mana",
                "manana", "mandta", "manga", "mangara", "mataba", "matanga",
                "mathatha", "mbaga", "mbagwa", "mbara", "mbata", "mwanga",
                "mwara", "mwarara", "namath", "namatha", "ndaga", "ndama",
                "ndanga", "ndanya", "nga", "ngaga", "nganga", "nganjara",
                "ngara", "ngaraya", "ngaya", "ngayagnana", "ngayanana",
                "njaga", "njagana", "njanga", "njara", "njaraga", "njatha",
                "nyaka", "nyara", "nyataya", "nyatha", "ra", "rahangha",
                "rala", "ramaga", "rawa", "sala", "tana", "tara", "tha",
                "thagana", "thata", "wabara", "wachara", "waganja",
                "wahanya", "wahara", "wakaga", "wakanda", "wamaganda",
                "wamatata", "wamba", "wambaga", "wanana", "wangama",
                "wangamba", "wanjaha", "wanjaka", "wanyaka", "wanyaraga",
                "wara", "waraga", "waraganga", "warakara", "warama",
                "warara", "warata", "waratama", "waratara", "wataka",
                "wathaka", "wawara", "yanya", ]


def vowel_count(name):
    """Get the count of vowels in a name.
    Given a name as a string, return the number of vowels in that name.
    """
    count = 0
    for i in VOWELS:
        count += name.count(i)
    return count


def name_matrix(name):
    """Get the name matrix.
    Generate matrix of names. This is a list of the same name repeated
    n times, where n is (the number of all vowels) to the power of
    (the count of vowels in the given name).
    For example 'eric' has 2 vowels and there are 5 vowels, 'aeiou'
    so the length of the name matrix will be 5 to the power of 2 or 25.
    """
    name += " "
    matrix = (name * (5 ** vowel_count(name))).split(" ")[:-1]
    return matrix


def vowel_index(name):
    """Get the index (position) of each vowel in the name.
    Given a name, return a list of index positions, or places where a vowel
    appears in the name.
    For example the name 'eric' returns vowel_index (vindex) of [0,2].
    """
    vindex = []
    for i in range(len(name)):
        if VOWELS.__contains__(name[i]):
            vindex.append(i)
    return vindex


def vowel_list(count):
    """Get a list of repeating vowels:
    ["a","e","i","o","u","a","e","i","o","u"...]
    """
    vlist = VOWELS * count
    print "vowel_list length: {}".format(len(vlist))
    return vlist


# mutate: vlist is 'vowel_list', and vindex is 'vowel_index'
def mutate(matrix, vlist, vindex):
    """mutate(matrix_list[], vowel_list[], int(vowel_list)) matrix list is the
    entire result set, calculated by raising 5 (the count of all vowels) to
    the power of x (the number of vowels in the name). For example the name
    Mutuma has 3 vowels namely "u", "u" and "a".
    """
    for position in vindex:
        matrix.sort()
        for i in range(len(matrix)):
            name_list = list(matrix[i])
            setitem(name_list, position, vlist[i])
            temp_string = ""
            for letter in name_list:
                temp_string += letter
            matrix[i] = temp_string
    return matrix


def main():
    """main() function for vowelsub module.
    Given a list of names as strings, generate name permutations for each name.
    By default the main() function calls the mutate() function with the sample
    name list provided in the module.
    """
    unwrapthis = []
    namelist = SAMPLE_NAMES[:]

    for name in namelist:
        #lowercase_name = name.lower()
        nam = name.lower()
        index = vowel_index(nam)
        matrix = name_matrix(nam)
        vli = vowel_list(len(matrix))
        mutation = mutate(matrix, vli, index)
        unwrapthis.extend(mutation)

    print "Total unwrapped names is {}".format(len(unwrapthis))

    output_file = open("other_list.txt", "w")

    for item in unwrapthis:
        output_file.write(item + "\n")
    output_file.close()


if __name__ == "__main__":
    main()
